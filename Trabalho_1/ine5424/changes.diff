Index: app/philosophers_dinner.cc
===================================================================
--- app/philosophers_dinner.cc	(revisão 4509)
+++ app/philosophers_dinner.cc	(cópia de trabalho)
@@ -1 +1,107 @@
-link ../src/abstraction/semaphore_test.cc
\ No newline at end of file
+// EPOS Semaphore Abstraction Test Program
+
+#include <utility/ostream.h>
+#include <thread.h>
+#include <mutex.h>
+#include <semaphore.h>
+#include <alarm.h>
+#include <display.h>
+
+using namespace EPOS;
+
+const int iterations = 10;
+
+Semaphore table;
+
+Thread * phil[5];
+Semaphore * chopstick[5];
+
+OStream cout;
+
+int philosopher(int n, int l, int c)
+{
+    int first = (n < 4)? n : 0;
+    int second = (n < 4)? n + 1 : 4;
+
+    for(int i = iterations; i > 0; i--) {
+
+        table.p();
+        Display::position(l, c);
+        cout << "thinking";
+        table.v();
+
+        Delay thinking(2000000);
+
+        chopstick[first]->p();   // get first chopstick
+        chopstick[second]->p();   // get second chopstick
+
+        table.p();
+        Display::position(l, c);
+        cout << " eating ";
+        table.v();
+
+        Delay eating(1000000);
+
+        chopstick[first]->v();   // release first chopstick
+        chopstick[second]->v();   // release second chopstick
+    }
+
+    table.p();
+    Display::position(l, c);
+    cout << "  done  ";
+    table.v();
+
+    return iterations;
+}
+
+int main()
+{
+    table.p();
+    Display::clear();
+    Display::position(0, 0);
+    cout << "The Philosopher's Dinner:" << endl;
+
+    for(int i = 0; i < 5; i++)
+        chopstick[i] = new Semaphore;
+
+    phil[0] = new Thread(&philosopher, 0,  5, 32);
+    phil[1] = new Thread(&philosopher, 1, 10, 44);
+    phil[2] = new Thread(&philosopher, 2, 16, 39);
+    phil[3] = new Thread(&philosopher, 3, 16, 24);
+    phil[4] = new Thread(&philosopher, 4, 10, 20);
+
+    Delay thinking(1000000);
+    cout << "Philosophers are alive and hungry!" << endl;
+
+    Display::position(7, 44);
+    cout << '/';
+    Display::position(13, 44);
+    cout << '\\';
+    Display::position(16, 35);
+    cout << '|';
+    Display::position(13, 27);
+    cout << '/';
+    Display::position(7, 27);
+    cout << '\\';
+    Display::position(19, 0);
+
+    cout << "The dinner is served ..." << endl;
+    table.v();
+
+    for(int i = 0; i < 5; i++) {
+        int ret = phil[i]->join();
+        table.p();
+        Display::position(20 + i, 0);
+        cout << "Philosopher " << i << " ate " << ret << " times " << endl;
+        table.v();
+    }
+
+    for(int i = 0; i < 5; i++)
+        delete chopstick[i];
+    for(int i = 0; i < 5; i++)
+        delete phil[i];
+
+    cout << "The end!" << endl;
+
+    return 0;
+}
Index: app/producer_consumer.cc
===================================================================
--- app/producer_consumer.cc	(revisão 4509)
+++ app/producer_consumer.cc	(cópia de trabalho)
@@ -1 +1,55 @@
-link ../src/abstraction/synchronizer_test.cc
\ No newline at end of file
+// EPOS Synchronizer Abstraction Test Program
+
+#include <utility/ostream.h>
+#include <thread.h>
+#include <semaphore.h>
+#include <alarm.h>
+
+using namespace EPOS;
+
+const int iterations = 100;
+
+OStream cout;
+
+const int BUF_SIZE = 16;
+char buffer[BUF_SIZE];
+Semaphore empty(BUF_SIZE);
+Semaphore full(0);
+
+int consumer()
+{
+    int out = 0;
+    for(int i = 0; i < iterations; i++) {
+        full.p();
+        cout << "C<-" << buffer[out] << "\t";
+        out = (out + 1) % BUF_SIZE;
+        Alarm::delay(5000);
+        empty.v();
+    }
+
+    return 0;
+}
+
+int main()
+{
+    Thread * cons = new Thread(&consumer);
+
+    // producer
+    int in = 0;
+    for(int i = 0; i < iterations; i++) {
+        empty.p();
+        Alarm::delay(5000);
+        buffer[in] = 'a' + in;
+        cout << "P->" << buffer[in] << "\t";
+        in = (in + 1) % BUF_SIZE;
+        full.v();
+    }
+
+    cons->join();
+
+    cout << "The end!" << endl;
+
+    delete cons;
+
+    return 0;
+}
Index: include/synchronizer.h
===================================================================
--- include/synchronizer.h	(revisão 4509)
+++ include/synchronizer.h	(cópia de trabalho)
@@ -5,6 +5,7 @@

 #include <cpu.h>
 #include <thread.h>
+#include <utility/queue.h>

 __BEGIN_SYS

@@ -22,12 +23,14 @@
     void begin_atomic() { Thread::lock(); }
     void end_atomic() { Thread::unlock(); }

-    void sleep() { Thread::yield(); } // implicit unlock()
-    void wakeup() { end_atomic(); }
-    void wakeup_all() { end_atomic(); }
+    void sleep() { Thread::sleep(_queue); } // implicit unlock()
+    void wakeup() {Thread::wakeup(_queue); }// implicit unlock()
+    void wakeup_all() { Thread::wakeup_all(_queue); }// implicit unlock()
+
+    // Data structures
+    Thread::Queue _queue;
 };

 __END_SYS

 #endif
-
Index: include/system/config.h
===================================================================
--- include/system/config.h	(revisão 4509)
+++ include/system/config.h	(cópia de trabalho)
@@ -7,15 +7,15 @@
 // ARCHITECTURE, MACHINE, AND APPLICATION SELECTION
 // This section is generated automatically from makedefs by $EPOS/etc/makefile
 //============================================================================
-#define MODE xxx
-#define ARCH xxx
-#define MACH xxx
-#define MMOD xxx
-#define APPL xxx
-#define __mode_xxx__
-#define __arch_xxx__
-#define __mach_xxx__
-#define __mmod_xxx__
+#define MODE library
+#define ARCH ia32
+#define MACH pc
+#define MMOD legacy
+#define APPL synchronizer_test
+#define __mode_library__
+#define __arch_ia32__
+#define __mach_pc__
+#define __mmod_legacy__

 #if defined (__arch_avr__) || defined (__mmod_lm3s811__)
 #define __no_networking__
Index: include/thread.h
===================================================================
--- include/thread.h	(revisão 4509)
+++ include/thread.h	(cópia de trabalho)
@@ -78,6 +78,9 @@
     void suspend();
     void resume();

+    static void sleep(Queue &queue);
+    static void wakeup(Queue &queue);
+    static void wakeup_all(Queue &queue);
     static Thread * volatile self() { return running(); }
     static void yield();
     static void exit(int status = 0);
@@ -107,6 +110,8 @@
     Context * volatile _context;
     volatile State _state;
     Queue::Element _link;
+    Queue *_sync_queue;
+    Queue _joining;

     static Scheduler_Timer * _timer;

@@ -114,6 +119,7 @@
     static Thread * volatile _running;
     static Queue _ready;
     static Queue _suspended;
+
 };


Index: makefile
===================================================================
--- makefile	(revisão 4509)
+++ makefile	(cópia de trabalho)
@@ -1,112 +1,112 @@
-# EPOS Main Makefile
-
-include makedefs
-
-ifeq ($(findstring flash,$(MAKECMDGOALS)),flash)
-SUBDIRS	:= etc tools src app
-else
-SUBDIRS	:= etc tools src app img
-endif
-
-all: FORCE
-ifndef APPLICATION
-		$(foreach app,$(APPLICATIONS),$(MAKE) APPLICATION=$(app) $(PRECLEAN) all1;)
-else
-		$(MAKE) all1
-endif
-
-all1: $(SUBDIRS)
-
-$(SUBDIRS): FORCE
-		(cd $@ && $(MAKE))
-
-run: FORCE
-ifndef APPLICATION
-		$(foreach app,$(APPLICATIONS),$(MAKE) APPLICATION=$(app) $(PRECLEAN) run1;)
-else
-		$(MAKE) run1
-endif
-
-run1: all1
-		(cd img && $(MAKE) run)
-
-debug: FORCE
-ifndef APPLICATION
-		$(foreach app,$(APPLICATIONS),$(MAKE) GDB=1 APPLICATION=$(app) $(PRECLEAN) all1 debug1;)
-else
-		$(MAKE) GDB=1 all1 debug1
-endif
-
-debug1: FORCE
-		(cd img && $(MAKE) debug)
-
-flash: FORCE
-ifndef APPLICATION
-		$(foreach app,$(APPLICATIONS),$(MAKE) APPLICATION=$(app) $(PRECLEAN) flash1;)
-else
-		$(MAKE) flash1
-endif
-
-flash1: all1
-		(cd img && $(MAKE) flash)
-
-TESTS := $(subst .cc,,$(shell find $(SRC)/abstraction -name \*_test.cc -printf "%f\n"))
-TEST_SORUCES := $(shell find $(SRC)/abstraction -name \*_test.cc -printf "%p\n")
-test: $(subst .cc,_traits.h,$(TEST_SORUCES))
-		$(INSTALL) $(TEST_SORUCES) $(APP)
-		$(INSTALL) $(subst .cc,_traits.h,$(TEST_SORUCES)) $(APP)
-		$(foreach tst,$(TESTS),$(MAKETEST) APPLICATION=$(tst) prebuild_$(tst) clean1 all1 posbuild_$(tst) prerun_$(tst) run1 posbuild_$(tst);)
-		$(foreach tst,$(TESTS),$(CLEAN) $(APP)/$(tst)*;)
-
-.PHONY: prebuild_$(APPLICATION) posbuild_$(APPLICATION) prerun_$(APPLICATION)
-prebuild_$(APPLICATION):
-		@echo "Building $(APPLICATION) ..."
-posbuild_$(APPLICATION):
-		@echo "done!"
-prerun_$(APPLICATION):
-		@echo "Cooling down for 10s ..."
-		sleep 10
-		@echo "Running $(APPLICATION) ..."
-
-clean: FORCE
-ifndef APPLICATION
-		$(MAKE) APPLICATION=$(word 1,$(APPLICATIONS)) clean1
-else
-		$(MAKE) clean1
-endif
-
-clean1: FORCE
-		(cd etc && $(MAKECLEAN))
-		(cd app && $(MAKECLEAN))
-		(cd img && $(MAKECLEAN))
-		(cd src && $(MAKECLEAN))
-		find $(LIB) -maxdepth 1 -type f -exec $(CLEAN) {} \;
-
-veryclean: clean
-		(cd tools && $(MAKECLEAN))
-		find $(LIB) -maxdepth 1 -type f -exec $(CLEAN) {} \;
-		find $(BIN) -maxdepth 1 -type f -exec $(CLEAN) {} \;
-		find $(APP) -maxdepth 1 -type f -perm -755 -exec $(CLEAN) {} \;
-		find $(IMG) -name "*.img" -exec $(CLEAN) {} \;
-		find $(IMG) -name "*.out" -exec $(CLEAN) {} \;
-		find $(IMG) -name "*.pcap" -exec $(CLEAN) {} \;
-		find $(IMG) -name "*.net" -exec $(CLEAN) {} \;
-		find $(IMG) -name "*.hex" -exec $(CLEAN) {} \;
-		find $(IMG) -maxdepth 1 -type f -perm 755 -exec $(CLEAN) {} \;
-		find $(TOP) -name "*_test_traits.h" -type f -perm 755 -exec $(CLEAN) {} \;
-
-dist: veryclean
-		find $(TOP) -name ".*project" -exec $(CLEAN) {} \;
-		find $(TOP) -name CVS -type d -print | xargs $(CLEANDIR)
-		find $(TOP) -name .svn -type d -print | xargs $(CLEANDIR)
-		find $(TOP) -name "*.h" -print | xargs sed -i "1r $(TOP)/LICENSE"
-		find $(TOP) -name "*.cc" -print | xargs sed -i "1r $(TOP)/LICENSE"
-		sed -e 's/^\/\//#/' LICENSE > LICENSE.mk
-		find $(TOP) -name "makedefs" -print | xargs sed -i "1r $(TOP)/LICENSE.mk"
-		find $(TOP) -name "makefile" -print | xargs sed -i "1r $(TOP)/LICENSE.mk"
-		$(CLEAN) LICENSE.mk
-		sed -e 's/^\/\//#/' LICENSE > LICENSE.as
-		find $(TOP) -name "*.S" -print | xargs sed -i "1r $(TOP)/LICENSE.as"
-		$(CLEAN) LICENSE.as
-
-FORCE:
+# EPOS Main Makefile
+
+include makedefs
+
+ifeq ($(findstring flash,$(MAKECMDGOALS)),flash)
+SUBDIRS	:= etc tools src app
+else
+SUBDIRS	:= etc tools src app img
+endif
+
+all: FORCE
+ifndef APPLICATION
+		$(foreach app,$(APPLICATIONS),$(MAKE) APPLICATION=$(app) $(PRECLEAN) all1;)
+else
+		$(MAKE) all1
+endif
+
+all1: $(SUBDIRS)
+
+$(SUBDIRS): FORCE
+		(cd $@ && $(MAKE))
+
+run: FORCE
+ifndef APPLICATION
+		$(foreach app,$(APPLICATIONS),$(MAKE) APPLICATION=$(app) $(PRECLEAN) run1;)
+else
+		$(MAKE) run1
+endif
+
+run1: all1
+		(cd img && $(MAKE) run)
+
+debug: FORCE
+ifndef APPLICATION
+		$(foreach app,$(APPLICATIONS),$(MAKE) GDB=1 APPLICATION=$(app) $(PRECLEAN) all1 debug1;)
+else
+		$(MAKE) GDB=1 all1 debug1
+endif
+
+debug1: FORCE
+		(cd img && $(MAKE) debug)
+
+flash: FORCE
+ifndef APPLICATION
+		$(foreach app,$(APPLICATIONS),$(MAKE) APPLICATION=$(app) $(PRECLEAN) flash1;)
+else
+		$(MAKE) flash1
+endif
+
+flash1: all1
+		(cd img && $(MAKE) flash)
+
+TESTS := $(subst .cc,,$(shell find $(SRC)/abstraction -name \*_test.cc -printf "%f\n"))
+TEST_SORUCES := $(shell find $(SRC)/abstraction -name \*_test.cc -printf "%p\n")
+test: $(subst .cc,_traits.h,$(TEST_SORUCES))
+		$(INSTALL) $(TEST_SORUCES) $(APP)
+		$(INSTALL) $(subst .cc,_traits.h,$(TEST_SORUCES)) $(APP)
+		$(foreach tst,$(TESTS),$(MAKETEST) APPLICATION=$(tst) prebuild_$(tst) clean1 all1 posbuild_$(tst) prerun_$(tst) run1 posbuild_$(tst);)
+		$(foreach tst,$(TESTS),$(CLEAN) $(APP)/$(tst)*;)
+
+.PHONY: prebuild_$(APPLICATION) posbuild_$(APPLICATION) prerun_$(APPLICATION)
+prebuild_$(APPLICATION):
+		@echo "Building $(APPLICATION) ..."
+posbuild_$(APPLICATION):
+		@echo "done!"
+prerun_$(APPLICATION):
+		@echo "Cooling down for 10s ..."
+		sleep 10
+		@echo "Running $(APPLICATION) ..."
+
+clean: FORCE
+ifndef APPLICATION
+		$(MAKE) APPLICATION=$(word 1,$(APPLICATIONS)) clean1
+else
+		$(MAKE) clean1
+endif
+
+clean1: FORCE
+		(cd etc && $(MAKECLEAN))
+		(cd app && $(MAKECLEAN))
+		(cd img && $(MAKECLEAN))
+		(cd src && $(MAKECLEAN))
+		find $(LIB) -maxdepth 1 -type f -exec $(CLEAN) {} \;
+
+veryclean: clean
+		(cd tools && $(MAKECLEAN))
+		find $(LIB) -maxdepth 1 -type f -exec $(CLEAN) {} \;
+		find $(BIN) -maxdepth 1 -type f -exec $(CLEAN) {} \;
+		find $(APP) -maxdepth 1 -type f -perm -755 -exec $(CLEAN) {} \;
+		find $(IMG) -name "*.img" -exec $(CLEAN) {} \;
+		find $(IMG) -name "*.out" -exec $(CLEAN) {} \;
+		find $(IMG) -name "*.pcap" -exec $(CLEAN) {} \;
+		find $(IMG) -name "*.net" -exec $(CLEAN) {} \;
+		find $(IMG) -name "*.hex" -exec $(CLEAN) {} \;
+		find $(IMG) -maxdepth 1 -type f -perm 755 -exec $(CLEAN) {} \;
+		find $(TOP) -name "*_test_traits.h" -type f -perm 755 -exec $(CLEAN) {} \;
+
+dist: veryclean
+		find $(TOP) -name ".*project" -exec $(CLEAN) {} \;
+		find $(TOP) -name CVS -type d -print | xargs $(CLEANDIR)
+		find $(TOP) -name .svn -type d -print | xargs $(CLEANDIR)
+		find $(TOP) -name "*.h" -print | xargs sed -i "1r $(TOP)/LICENSE"
+		find $(TOP) -name "*.cc" -print | xargs sed -i "1r $(TOP)/LICENSE"
+		sed -e 's/^\/\//#/' LICENSE > LICENSE.mk
+		find $(TOP) -name "makedefs" -print | xargs sed -i "1r $(TOP)/LICENSE.mk"
+		find $(TOP) -name "makefile" -print | xargs sed -i "1r $(TOP)/LICENSE.mk"
+		$(CLEAN) LICENSE.mk
+		sed -e 's/^\/\//#/' LICENSE > LICENSE.as
+		find $(TOP) -name "*.S" -print | xargs sed -i "1r $(TOP)/LICENSE.as"
+		$(CLEAN) LICENSE.as
+
+FORCE:
Index: src/abstraction/mutex.cc
===================================================================
--- src/abstraction/mutex.cc	(revisão 4509)
+++ src/abstraction/mutex.cc	(cópia de trabalho)
@@ -7,6 +7,7 @@
 Mutex::Mutex(): _locked(false)
 {
     db<Synchronizer>(TRC) << "Mutex() => " << this << endl;
+
 }


@@ -22,8 +23,7 @@

     begin_atomic();
     if(tsl(_locked))
-        while(tsl(_locked))
-            sleep(); // implicit end_atomic()
+        sleep(); // implicit end_atomic()
     else
         end_atomic();
 }
Index: src/abstraction/semaphore.cc
===================================================================
--- src/abstraction/semaphore.cc	(revisão 4509)
+++ src/abstraction/semaphore.cc	(cópia de trabalho)
@@ -20,9 +20,12 @@
 {
     db<Synchronizer>(TRC) << "Semaphore::p(this=" << this << ",value=" << _value << ")" << endl;

+    begin_atomic();
     fdec(_value);
-    while(_value < 0)
+    if(_value < 0)
         sleep();
+    else
+      end_atomic();
 }


@@ -30,9 +33,12 @@
 {
     db<Synchronizer>(TRC) << "Semaphore::v(this=" << this << ",value=" << _value << ")" << endl;

+    begin_atomic();
     finc(_value);
     if(_value < 1)
         wakeup();
+    else
+      end_atomic();
 }

 __END_SYS
Index: src/abstraction/thread.cc
===================================================================
--- src/abstraction/thread.cc	(revisão 4509)
+++ src/abstraction/thread.cc	(cópia de trabalho)
@@ -12,7 +12,7 @@
 __BEGIN_SYS

 // Class attributes
-Scheduler_Timer * Thread::_timer;
+Scheduler_Timer* Thread::_timer;

 Thread* volatile Thread::_running;
 Thread::Queue Thread::_ready;
@@ -26,16 +26,15 @@
     _stack = reinterpret_cast<char *>(kmalloc(stack_size));
 }

-
 void Thread::constructor_epilog(const Log_Addr & entry, unsigned int stack_size)
 {
     db<Thread>(TRC) << "Thread(entry=" << entry
-                    << ",state=" << _state
-                    << ",priority=" << _link.rank()
-                    << ",stack={b=" << reinterpret_cast<void *>(_stack)
-                    << ",s=" << stack_size
-                    << "},context={b=" << _context
-                    << "," << *_context << "}) => " << this << endl;
+      << ",state=" << _state
+      << ",priority=" << _link.rank()
+      << ",stack={b=" << reinterpret_cast<void *>(_stack)
+      << ",s=" << stack_size
+      << "},context={b=" << _context
+      << "," << *_context << "}) => " << this << endl;

     switch(_state) {
         case RUNNING: break;
@@ -46,20 +45,22 @@
     unlock();
 }

-
 Thread::~Thread()
 {
     lock();

     db<Thread>(TRC) << "~Thread(this=" << this
-                    << ",state=" << _state
-                    << ",priority=" << _link.rank()
-                    << ",stack={b=" << reinterpret_cast<void *>(_stack)
-                    << ",context={b=" << _context
-                    << "," << *_context << "})" << endl;
+      << ",state=" << _state
+      << ",priority=" << _link.rank()
+      << ",stack={b=" << reinterpret_cast<void *>(_stack)
+      << ",context={b=" << _context
+      << "," << *_context << "})" << endl;

     _ready.remove(this);
     _suspended.remove(this);
+    if(_sync_queue != 0)
+      _sync_queue->remove(this);
+    wakeup_all(_joining);

     unlock();

@@ -66,7 +67,6 @@
     kfree(_stack);
 }

-
 int Thread::join()
 {
     lock();
@@ -73,8 +73,8 @@

     db<Thread>(TRC) << "Thread::join(this=" << this << ",state=" << _state << ")" << endl;

-    while(_state != FINISHING)
-        yield(); // implicit unlock()
+    if(_state != FINISHING)
+      sleep(_joining);

     unlock();

@@ -81,7 +81,6 @@
     return *reinterpret_cast<int *>(_stack);
 }

-
 void Thread::pass()
 {
     lock();
@@ -101,7 +100,6 @@
     unlock();
 }

-
 void Thread::suspend()
 {
     lock();
@@ -109,7 +107,7 @@
     db<Thread>(TRC) << "Thread::suspend(this=" << this << ")" << endl;

     if(_running != this)
-        _ready.remove(this);
+      _ready.remove(this);

     _state = SUSPENDED;
     _suspended.insert(&_link);
@@ -120,12 +118,11 @@

         dispatch(this, _running);
     } else
-        idle(); // implicit unlock()
+      idle(); // implicit unlock()

     unlock();
 }

-
 void Thread::resume()
 {
     lock();
@@ -132,14 +129,78 @@

     db<Thread>(TRC) << "Thread::resume(this=" << this << ")" << endl;

-   _suspended.remove(this);
-   _state = READY;
-   _ready.insert(&_link);
+    _suspended.remove(this);
+    _state = READY;
+    _ready.insert(&_link);

-   unlock();
+    unlock();
 }

+void Thread::sleep(Queue & queue_wait) {
+    assert(locked()); //Must be locked.

+    Thread * prev = running();//get the running thread
+    prev->_sync_queue = &queue_wait;//set the waiting queue of a synchronizer;
+    prev->_state = WAITING;//Change the running thread state
+    Queue::Element * runing_link = &prev->_link;//Get the queue element for the running one.
+    queue_wait.insert(runing_link);//Insert the running thread into the queue
+
+    //Now, must schedule another thread to run!
+    if(_ready.empty()) {    //Check if there is someone to be executed
+        idle();
+    } else {    //And if there is someone...
+        Thread * next = _ready.remove()->object();//Get the next thread
+        _running = next;//Run!
+        _running->_state = RUNNING;//Change the actual thread state
+        dispatch(prev, next);//Change the context in CPU
+    }
+
+    unlock();
+}
+
+void Thread::wakeup(Queue & queue_wait) {
+    assert(locked());
+
+    if(queue_wait.empty()){
+        //Should never happen
+        return;
+    }
+
+    Thread * woken = queue_wait.remove()->object();
+    woken->_state = READY;
+    woken->_sync_queue = 0;
+    _ready.insert(&woken->_link);
+
+    unlock();
+
+    //The ready queue was changed
+    if(preemptive)
+      reschedule();
+}
+
+void Thread::wakeup_all(Queue &queue_wait){
+    assert(locked());
+
+    if(queue_wait.empty()){
+        //Should never happen
+        return;
+    }
+
+    Thread * woken = 0;
+    while(!queue_wait.empty()){
+      woken = queue_wait.remove()->object();
+      woken->_state = READY;
+      woken->_sync_queue = 0;
+      _ready.insert(&woken->_link);
+    }
+
+    unlock();
+
+    //The ready queue was changed
+    if(preemptive)
+      reschedule();
+}
+
 // Class methods
 void Thread::yield()
 {
@@ -157,12 +218,11 @@

         dispatch(prev, _running);
     } else
-        idle();
+      idle();

     unlock();
 }

-
 void Thread::exit(int status)
 {
     lock();
@@ -170,10 +230,11 @@
     db<Thread>(TRC) << "Thread::exit(status=" << status << ") [running=" << running() << "]" << endl;

     while(_ready.empty() && !_suspended.empty())
-        idle(); // implicit unlock();
+      idle(); // implicit unlock();

     lock();

+    wakeup_all(_running->_joining);// implicit unlock();
+    lock();
     if(!_ready.empty()) {
         Thread * prev = _running;
         prev->_state = FINISHING;
@@ -197,24 +258,21 @@
     unlock();
 }

-
 void Thread::reschedule()
 {
     yield();
 }

-
 void Thread::time_slicer(const IC::Interrupt_Id & i)
 {
     reschedule();
 }

-
 void Thread::dispatch(Thread * prev, Thread * next)
 {
     if(prev != next) {
         if(prev->_state == RUNNING)
-            prev->_state = READY;
+          prev->_state = READY;
         next->_state = RUNNING;

         db<Thread>(TRC) << "Thread::dispatch(prev=" << prev << ",next=" << next << ")" << endl;
@@ -227,7 +285,6 @@
     unlock();
 }

-
 int Thread::idle()
 {
     db<Thread>(TRC) << "Thread::idle()" << endl;
