Index: include/synchronizer.h
===================================================================
--- include/synchronizer.h	(revisão 4537)
+++ include/synchronizer.h	(cópia de trabalho)
@@ -12,6 +12,10 @@
 {
 protected:
     Synchronizer_Common() {}
+    ~Synchronizer_Common(){
+        begin_atomic();
+        wakeup_all();
+    }
 
     // Atomic operations
     bool tsl(volatile bool & lock) { return CPU::tsl(lock); }
@@ -22,12 +26,14 @@
     void begin_atomic() { Thread::lock(); }
     void end_atomic() { Thread::unlock(); }
 
-    void sleep() { Thread::yield(); } // implicit unlock()
-    void wakeup() { end_atomic(); }
-    void wakeup_all() { end_atomic(); }
+    void sleep() { Thread::sleep(_queue); } // implicit unlock()
+    void wakeup() {Thread::wakeup(_queue); }// implicit unlock()
+    void wakeup_all() { Thread::wakeup_all(_queue); }// implicit unlock()
+
+    // Data structures
+    Thread::Queue _queue;
 };
 
 __END_SYS
 
 #endif
-
Index: include/system/config.h
===================================================================
--- include/system/config.h	(revisão 4537)
+++ include/system/config.h	(cópia de trabalho)
@@ -7,15 +7,15 @@
 // ARCHITECTURE, MACHINE, AND APPLICATION SELECTION
 // This section is generated automatically from makedefs by $EPOS/etc/makefile
 //============================================================================
-#define MODE xxx
-#define ARCH xxx
-#define MACH xxx
-#define MMOD xxx
-#define APPL xxx
-#define __mode_xxx__
-#define __arch_xxx__
-#define __mach_xxx__
-#define __mmod_xxx__
+#define MODE library
+#define ARCH ia32
+#define MACH pc
+#define MMOD legacy
+#define APPL alarm_test
+#define __mode_library__
+#define __arch_ia32__
+#define __mach_pc__
+#define __mmod_legacy__
 
 #if defined (__arch_avr__) || defined (__mmod_lm3s811__)
 #define __no_networking__
Index: include/thread.h
===================================================================
--- include/thread.h	(revisão 4537)
+++ include/thread.h	(cópia de trabalho)
@@ -45,7 +45,9 @@
     enum {
         HIGH = 0,
         NORMAL = 15,
-        LOW = 31
+        MAIN = 15,
+        LOW = 31,
+        IDLE = 32
     };
 
     // Thread Configuration
@@ -78,6 +80,9 @@
     void suspend();
     void resume();
 
+    static void sleep(Queue &queue);
+    static void wakeup(Queue &queue);
+    static void wakeup_all(Queue &queue);
     static Thread * volatile self() { return running(); }
     static void yield();
     static void exit(int status = 0);
@@ -107,8 +112,11 @@
     Context * volatile _context;
     volatile State _state;
     Queue::Element _link;
+    Queue * volatile _sync_queue;
+    Queue _joining;
 
     static Scheduler_Timer * _timer;
+    static volatile unsigned int _thread_counter; 
 
 private:
     static Thread * volatile _running;
Index: src/abstraction/mutex.cc
===================================================================
--- src/abstraction/mutex.cc	(revisão 4537)
+++ src/abstraction/mutex.cc	(cópia de trabalho)
@@ -22,8 +22,7 @@
 
     begin_atomic();
     if(tsl(_locked))
-        while(tsl(_locked))
-            sleep(); // implicit end_atomic()
+        sleep(); // implicit end_atomic()
     else
         end_atomic();
 }
Index: src/abstraction/semaphore.cc
===================================================================
--- src/abstraction/semaphore.cc	(revisão 4537)
+++ src/abstraction/semaphore.cc	(cópia de trabalho)
@@ -20,9 +20,12 @@
 {
     db<Synchronizer>(TRC) << "Semaphore::p(this=" << this << ",value=" << _value << ")" << endl;
 
+    begin_atomic();
     fdec(_value);
-    while(_value < 0)
+    if(_value < 0)
         sleep();
+    else
+        end_atomic();
 }
 
 
@@ -30,9 +33,12 @@
 {
     db<Synchronizer>(TRC) << "Semaphore::v(this=" << this << ",value=" << _value << ")" << endl;
 
+    begin_atomic();
     finc(_value);
     if(_value < 1)
         wakeup();
+    else
+        end_atomic();
 }
 
 __END_SYS
Index: src/abstraction/semaphore_test.cc
===================================================================
--- src/abstraction/semaphore_test.cc	(revisão 4537)
+++ src/abstraction/semaphore_test.cc	(cópia de trabalho)
@@ -11,7 +11,7 @@
 
 const int iterations = 10;
 
-Mutex table;
+Semaphore table;
 
 Thread * phil[5];
 Semaphore * chopstick[5];
@@ -25,10 +25,10 @@
 
     for(int i = iterations; i > 0; i--) {
 
-        table.lock();
+        table.p();
         Display::position(l, c);
         cout << "thinking";
-        table.unlock();
+        table.v();
 
         Delay thinking(2000000);
 
@@ -35,10 +35,10 @@
         chopstick[first]->p();   // get first chopstick
         chopstick[second]->p();   // get second chopstick
 
-        table.lock();
+        table.p();
         Display::position(l, c);
         cout << " eating ";
-        table.unlock();
+        table.v();
 
         Delay eating(1000000);
 
@@ -46,10 +46,10 @@
         chopstick[second]->v();   // release second chopstick
     }
 
-    table.lock();
+    table.p();
     Display::position(l, c);
     cout << "  done  ";
-    table.unlock();
+    table.v();
 
     return iterations;
 }
@@ -56,7 +56,7 @@
 
 int main()
 {
-    table.lock();
+    table.p();
     Display::clear();
     Display::position(0, 0);
     cout << "The Philosopher's Dinner:" << endl;
@@ -69,7 +69,8 @@
     phil[2] = new Thread(&philosopher, 2, 16, 39);
     phil[3] = new Thread(&philosopher, 3, 16, 24);
     phil[4] = new Thread(&philosopher, 4, 10, 20);
-
+    
+    Delay thinking(1000000);
     cout << "Philosophers are alive and hungry!" << endl;
 
     Display::position(7, 44);
@@ -85,14 +86,14 @@
     Display::position(19, 0);
 
     cout << "The dinner is served ..." << endl;
-    table.unlock();
+    table.v();
 
     for(int i = 0; i < 5; i++) {
         int ret = phil[i]->join();
-        table.lock();
+        table.p();
         Display::position(20 + i, 0);
         cout << "Philosopher " << i << " ate " << ret << " times " << endl;
-        table.unlock();
+        table.v();
     }
 
     for(int i = 0; i < 5; i++)
Index: src/abstraction/thread.cc
===================================================================
--- src/abstraction/thread.cc	(revisão 4537)
+++ src/abstraction/thread.cc	(cópia de trabalho)
@@ -13,6 +13,7 @@
 
 // Class attributes
 Scheduler_Timer * Thread::_timer;
+volatile unsigned int Thread::_thread_counter;
 
 Thread* volatile Thread::_running;
 Thread::Queue Thread::_ready;
@@ -39,11 +40,18 @@
 
     switch(_state) {
         case RUNNING: break;
+        case READY: _ready.insert(&_link);
         case SUSPENDED: _suspended.insert(&_link); break;
-        default: _ready.insert(&_link);
+        case WAITING: break;
+        case FINISHING: break;
     }
 
-    unlock();
+    _thread_counter++;
+
+    if(preemptive && _state == READY && _link.rank() != IDLE)
+        reschedule();
+    else
+        unlock();
 }
 
 
@@ -60,6 +68,9 @@
 
     _ready.remove(this);
     _suspended.remove(this);
+    if(_sync_queue != 0)
+        _sync_queue->remove(this);
+    wakeup_all(_joining);
 
     unlock();
 
@@ -73,9 +84,11 @@
 
     db<Thread>(TRC) << "Thread::join(this=" << this << ",state=" << _state << ")" << endl;
 
-    while(_state != FINISHING)
-        yield(); // implicit unlock()
+    assert(this != _running);//não deve dar join em si mesma
 
+    if(_state != FINISHING)
+        sleep(_joining);
+
     unlock();
 
     return *reinterpret_cast<int *>(_stack);
@@ -114,13 +127,12 @@
     _state = SUSPENDED;
     _suspended.insert(&_link);
 
-    if((_running == this) && !_ready.empty()) {
+    if(_running == this) {
         _running = _ready.remove()->object();
         _running->_state = RUNNING;
 
         dispatch(this, _running);
-    } else
-        idle(); // implicit unlock()
+    }
 
     unlock();
 }
@@ -139,7 +151,67 @@
    unlock();
 }
 
+void Thread::sleep(Queue & queue_wait) {
+    assert(locked()); //Must be locked.
 
+    Thread * prev = running();//get the running thread
+    prev->_sync_queue = &queue_wait;//set the waiting queue of a synchronizer;
+    prev->_state = WAITING;//Change the running thread state
+    Queue::Element * runing_link = &prev->_link;//Get the queue element for the running one.
+    queue_wait.insert(runing_link);//Insert the running thread into the queue
+
+    //Now, must schedule another thread to run!
+    Thread * next = _ready.remove()->object();//Get the next thread
+    _running = next;//Run!
+    _running->_state = RUNNING;//Change the actual thread state
+    dispatch(prev, next);//Change the context in CPU
+
+    unlock();
+}
+
+void Thread::wakeup(Queue & queue_wait) {
+    assert(locked());
+
+    if(queue_wait.empty()){
+        //Should never happen
+        return;
+    }
+
+    Thread * woken = queue_wait.remove()->object();
+    woken->_state = READY;
+    woken->_sync_queue = 0;
+    _ready.insert(&woken->_link);
+
+    unlock();
+
+    //The ready queue was changed
+    if(preemptive)
+        reschedule();
+}
+
+void Thread::wakeup_all(Queue &queue_wait){
+    assert(locked());
+
+    if(queue_wait.empty()){
+        //Should never happen
+        return;
+    }
+
+    Thread * woken = 0;
+    while(!queue_wait.empty()){
+        woken = queue_wait.remove()->object();
+        woken->_state = READY;
+        woken->_sync_queue = 0;
+        _ready.insert(&woken->_link);
+    }
+
+    unlock();
+
+    //The ready queue was changed
+    if(preemptive)
+        reschedule();
+}
+
 // Class methods
 void Thread::yield()
 {
@@ -147,17 +219,14 @@
 
     db<Thread>(TRC) << "Thread::yield(running=" << _running << ")" << endl;
 
-    if(!_ready.empty()) {
-        Thread * prev = _running;
-        prev->_state = READY;
-        _ready.insert(&prev->_link);
+    Thread * prev = _running;
+    prev->_state = READY;
+    _ready.insert(&prev->_link);
 
-        _running = _ready.remove()->object();
-        _running->_state = RUNNING;
+    _running = _ready.remove()->object();
+    _running->_state = RUNNING;
 
-        dispatch(prev, _running);
-    } else
-        idle();
+    dispatch(prev, _running);
 
     unlock();
 }
@@ -169,31 +238,20 @@
 
     db<Thread>(TRC) << "Thread::exit(status=" << status << ") [running=" << running() << "]" << endl;
 
-    while(_ready.empty() && !_suspended.empty())
-        idle(); // implicit unlock();
+    Thread * prev = _running;
+    prev->_state = FINISHING;
+    *reinterpret_cast<int *>(prev->_stack) = status;
 
+    _thread_counter--;
+
+    wakeup_all(_running->_joining);// implicit unlock();
     lock();
 
-    if(!_ready.empty()) {
-        Thread * prev = _running;
-        prev->_state = FINISHING;
-        *reinterpret_cast<int *>(prev->_stack) = status;
+    _running = _ready.remove()->object();
+    _running->_state = RUNNING;
 
-        _running = _ready.remove()->object();
-        _running->_state = RUNNING;
+    dispatch(prev, _running);
 
-        dispatch(prev, _running);
-    } else {
-        db<Thread>(WRN) << "The last thread in the system has exited!" << endl;
-        if(reboot) {
-            db<Thread>(WRN) << "Rebooting the machine ..." << endl;
-            Machine::reboot();
-        } else {
-            db<Thread>(WRN) << "Halting the CPU ..." << endl;
-            CPU::halt();
-        }
-    }
-
     unlock();
 }
 
@@ -232,12 +290,25 @@
 {
     db<Thread>(TRC) << "Thread::idle()" << endl;
 
-    db<Thread>(INF) << "There are no runnable threads at the moment!" << endl;
-    db<Thread>(INF) << "Halting the CPU ..." << endl;
+    while(true){
+        //Caso não tenha mais thread para rodar...
+        if(_thread_counter <= 1){
+            lock();
+            db<Thread>(WRN) << "The last thread in the system has exited!" << endl;
+            if(reboot) {
+                db<Thread>(WRN) << "Rebooting the machine ..." << endl;
+                Machine::reboot();
+            } else {
+                db<Thread>(WRN) << "Halting the CPU ..." << endl;
+                CPU::int_enable();
+                CPU::halt();
+            }
+        }else{
+            CPU::int_enable();
+            CPU::halt();
+        }
+    }
 
-    CPU::int_enable();
-    CPU::halt();
-
     return 0;
 }
 
Index: src/init/init_first.cc
===================================================================
--- src/init/init_first.cc	(revisão 4537)
+++ src/init/init_first.cc	(cópia de trabalho)
@@ -28,8 +28,11 @@
         // If EPOS is not a kernel, then adjust the application entry point to __epos_app_entry,
         // which will directly call main(). In this case, _init will have already been called,
         // before Init_Application, to construct main()'s global objects.
-        Thread::_running = new (kmalloc(sizeof(Thread))) Thread(Thread::Configuration(Thread::RUNNING, Thread::NORMAL), reinterpret_cast<int (*)()>(__epos_app_entry));
+        Thread::_running = new (kmalloc(sizeof(Thread))) Thread(Thread::Configuration(Thread::RUNNING, Thread::MAIN), reinterpret_cast<int (*)()>(__epos_app_entry));
 
+        // Inicializa a thread idle
+        new (kmalloc(sizeof(Thread))) Thread(Thread::Configuration(Thread::READY, Thread::IDLE), &Thread::idle);
+
         db<Init>(INF) << "done!" << endl;
 
         db<Init>(INF) << "INIT ends here!" << endl;
